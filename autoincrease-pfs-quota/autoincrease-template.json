{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "functionAppName": {
        "type": "string",
        "defaultValue": "pfsquotafa",
        "metadata": {
          "description": "The name of the function app that you wish to create."
        }
      },
      "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS"
        ],
        "metadata": {
          "description": "Storage Account type"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "appInsightsLocation": {
        "type": "string",
        "metadata": {
          "description": "Location for Application Insights"
        }
      },
      "functionName": {
        "type": "string",
        "defaultValue": "pfsquotafunction",
        "metadata": {
          "description": "The name of the function."
        }
      }
},
    "variables": {
      "functionAppName": "[parameters('functionAppName')]",
      "hostingPlanName": "[parameters('functionAppName')]",
      "applicationInsightsName": "[parameters('functionAppName')]",
      "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
      "functionName": "[parameters('functionName')]"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-06-01",
        "name": "[variables('storageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[parameters('storageAccountType')]"
        },
        "kind": "Storage"
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2020-06-01",
        "name": "[variables('hostingPlanName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Y1",
          "tier": "Dynamic"
        },
        "properties": {
          "name": "[variables('hostingPlanName')]",
          "computeMode": "Dynamic"
        }
      },
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2020-06-01",
        "name": "[variables('functionAppName')]",
        "location": "[parameters('location')]",
        "kind": "functionapp",
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "identity": {
            "type": "SystemAssigned"
        },
        "properties": {
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "siteConfig": {
            "appSettings": [
              {
                "name": "AzureWebJobsStorage",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
              },
              {
                "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
              },
              {
                "name": "WEBSITE_CONTENTSHARE",
                "value": "[toLower(variables('functionAppName'))]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~2"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~10"
              },
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "powershell"
              }
            ],
            "use32BitWorkerProcess": "[bool('true')]",
            "powerShellVersion": "7.0"
          }
        }
      },
      {
        "type": "microsoft.insights/components",
        "apiVersion": "2020-02-02-preview",
        "name": "[variables('applicationInsightsName')]",
        "location": "[parameters('appInsightsLocation')]",
        "tags": {
          "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
        },
        "properties": {
          "ApplicationId": "[variables('applicationInsightsName')]",
          "Request_Source": "IbizaWebAppExtensionCreate"
        }
      },

        {
          "apiVersion": "2019-08-01",
          "name": "[concat(variables('functionAppName'),'/', parameters('functionName'))]",
          "type": "Microsoft.Web/sites/functions",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "config": {
                "bindings": [
                {
                "name": "Timer",
                "type": "timerTrigger",
                "direction": "in",
                "schedule": "0 */5 * * * *"
                }
                ]
            },
            "files": {
              "azure-functions-script.ps1": "# Input bindings are passed in via param block.\r\nparam($Timer)\r\n\r\n# Get the current universal time in the default string format.\r\n$currentUTCtime = (Get-Date).ToUniversalTime()\r\n\r\n# The 'IsPastDue' property is 'true' when the current function invocation is later than scheduled.\r\nif ($Timer.IsPastDue) {\r\n    Write-Host \"PowerShell timer is running late!\"\r\n}\r\n\r\n#Variable Definitions\r\n$min_free_gbs = 1000\r\n$subscription_id = \"input subscription id here\"\r\n$resource_group = \"input resource group name here\"\r\n$storage_account_name = \"input storage account name here\"\r\n$file_share_name = \"input file share name here\"\r\n\r\n#Connect to Azure and Import Az Module\r\nConnect-AzAccount -Identity\r\nImport-Module -Name Az\r\nSet-AzContext -SubscriptionId $subscription_id\r\n\r\n# Get file share\r\n$StorageContext = New-AzStorageContext -StorageAccountName $storage_account_name -Anonymous -Protocol \"http\"\r\n$PFS = Get-AzRmStorageShare -ResourceGroupName $resource_group -StorageAccountName $storage_account_name -Name $file_share_name\r\n\r\n# Get provisioned capacity and used capacity\r\n$ProvisionedCapacity = $PFS.QuotaGiB\r\n$UsedCapacity = $PFS.ShareUsageBytes\r\nWrite-Host \"Provisioned Capacity:\" $ProvisionedCapacity\r\nWrite-Host \"Share Usage Bytes:\" $UsedCapacity\r\n\r\n# if less than 20% of provisioned capacity is remaining, increase provisioned capacity by 20%\r\nif (($ProvisionedCapacity - ($UsedCapacity / 1000000000)) -lt ($ProvisionedCapacity*0.2)) {\r\n     $Quota = $ProvisionedCapacity*1.2\r\n     Set-AzStorageShareQuota -ShareName $file_share_name -Quota $Quota -Context $StorageContext\r\n     $ProvisionedCapacity = $Quota\r\n}\r\nWrite-Host \"New Provisioned Capacity:\" $ProvisionedCapacity\r\n\r\n# Write an information log with the current time.\r\nWrite-Host \"PowerShell timer trigger function ran! TIME:\" $currentUTCtime\r\n"
            }
            }
        }
    ]
}